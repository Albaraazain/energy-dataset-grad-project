{
    "sourceFile": "contexts/NotificationContext.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730204756076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730205270919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,40 +38,52 @@\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n   const markAsRead = async (id: string) => {\r\n-    const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n-    await updateDoc(notificationRef, { read: true });\r\n+    try {\r\n+      const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n+      await updateDoc(notificationRef, { read: true });\r\n+    } catch (error) {\r\n+      console.error('Error marking notification as read:', error);\r\n+    }\r\n   };\r\n \r\n   const markAllAsRead = async () => {\r\n-    const batch = writeBatch(firestoreDb.notifications.getRef().firestore);\r\n-    \r\n-    notifications.forEach(notification => {\r\n-      if (!notification.read) {\r\n-        const notificationRef = doc(firestoreDb.notifications.getRef(), notification.id);\r\n-        batch.update(notificationRef, { read: true });\r\n-      }\r\n-    });\r\n+    try {\r\n+      const batch = writeBatch(firestoreDb.notifications.getRef().firestore);\r\n+      \r\n+      notifications.forEach(notification => {\r\n+        if (!notification.read) {\r\n+          const notificationRef = doc(firestoreDb.notifications.getRef(), notification.id);\r\n+          batch.update(notificationRef, { read: true });\r\n+        }\r\n+      });\r\n \r\n-    await batch.commit();\r\n+      await batch.commit();\r\n+    } catch (error) {\r\n+      console.error('Error marking all notifications as read:', error);\r\n+    }\r\n   };\r\n \r\n   const dismissNotification = async (id: string) => {\r\n-    const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n-    await updateDoc(notificationRef, { dismissed: true });\r\n+    try {\r\n+      const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n+      await updateDoc(notificationRef, { dismissed: true });\r\n+    } catch (error) {\r\n+      console.error('Error dismissing notification:', error);\r\n+    }\r\n   };\r\n \r\n+  const value = {\r\n+    notifications,\r\n+    unreadCount,\r\n+    markAsRead,\r\n+    markAllAsRead,\r\n+    dismissNotification\r\n+  };\r\n+\r\n   return (\r\n-    <NotificationContext.Provider \r\n-      value={{ \r\n-        notifications, \r\n-        unreadCount,\r\n-        markAsRead,\r\n-        markAllAsRead,\r\n-        dismissNotification\r\n-      }}\r\n-    >\r\n+    <NotificationContext.Provider value={value}>\r\n       {children}\r\n     </NotificationContext.Provider>\r\n   );\r\n }\r\n"
                }
            ],
            "date": 1730204756076,
            "name": "Commit-0",
            "content": "// contexts/NotificationContext.tsx\r\n'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { Notification, NotificationContextType } from '@/types/notification';\r\nimport { firestoreDb } from '@/lib/firebase/firestore';\r\nimport { collection, query, orderBy, onSnapshot, updateDoc, doc, writeBatch } from 'firebase/firestore';\r\n\r\nconst NotificationContext = createContext<NotificationContextType>({\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  markAsRead: async () => {},\r\n  markAllAsRead: async () => {},\r\n  dismissNotification: async () => {},\r\n});\r\n\r\nexport function NotificationProvider({ children }: { children: React.ReactNode }) {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Subscribe to notifications collection\r\n    const q = query(\r\n      collection(firestoreDb.notifications.getRef()),\r\n      orderBy('timestamp', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const newNotifications = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      })) as Notification[];\r\n\r\n      setNotifications(newNotifications);\r\n      setUnreadCount(newNotifications.filter(n => !n.read).length);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const markAsRead = async (id: string) => {\r\n    const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n    await updateDoc(notificationRef, { read: true });\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    const batch = writeBatch(firestoreDb.notifications.getRef().firestore);\r\n    \r\n    notifications.forEach(notification => {\r\n      if (!notification.read) {\r\n        const notificationRef = doc(firestoreDb.notifications.getRef(), notification.id);\r\n        batch.update(notificationRef, { read: true });\r\n      }\r\n    });\r\n\r\n    await batch.commit();\r\n  };\r\n\r\n  const dismissNotification = async (id: string) => {\r\n    const notificationRef = doc(firestoreDb.notifications.getRef(), id);\r\n    await updateDoc(notificationRef, { dismissed: true });\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider \r\n      value={{ \r\n        notifications, \r\n        unreadCount,\r\n        markAsRead,\r\n        markAllAsRead,\r\n        dismissNotification\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNotifications() {\r\n  const context = useContext(NotificationContext);\r\n  if (context === undefined) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n}"
        }
    ]
}