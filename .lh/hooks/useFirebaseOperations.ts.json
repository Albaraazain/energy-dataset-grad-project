{
    "sourceFile": "hooks/useFirebaseOperations.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1730137159526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730205140085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// hooks/useFirebaseOperations.ts\r\n 'use client';\r\n \r\n import { useState } from 'react';\r\n import { \r\n@@ -11,8 +12,13 @@\n   setDoc\r\n } from 'firebase/firestore';\r\n import { firestoreDb, categoryConverter, linkConverter } from '@/lib/firebase/firestore';\r\n import { Category, Link } from '@/types';\r\n+import {\r\n+  createCategoryNotification,\r\n+  createLinkNotification,\r\n+  createNoteNotification\r\n+} from '@/lib/notifications';\r\n \r\n export function useFirebaseOperations() {\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState<Error | null>(null);\r\n@@ -25,8 +31,12 @@\n       await setDoc(docRef, categoryConverter.toFirestore({\r\n         ...category,\r\n         links: []\r\n       }));\r\n+\r\n+      // Create notification\r\n+      await createCategoryNotification.created(category.title, docRef.id);\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error adding category:', err);\r\n@@ -40,8 +50,14 @@\n     setLoading(true);\r\n     try {\r\n       const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n       await updateDoc(docRef, categoryConverter.toFirestore(data));\r\n+\r\n+      // Create notification\r\n+      if (data.title) {\r\n+        await createCategoryNotification.updated(data.title, categoryId);\r\n+      }\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error updating category:', err);\r\n@@ -50,13 +66,17 @@\n       return false;\r\n     }\r\n   };\r\n \r\n-  const deleteCategory = async (categoryId: string) => {\r\n+  const deleteCategory = async (categoryId: string, categoryTitle: string) => {\r\n     setLoading(true);\r\n     try {\r\n       const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n       await deleteDoc(docRef);\r\n+\r\n+      // Create notification\r\n+      await createCategoryNotification.deleted(categoryTitle);\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error deleting category:', err);\r\n@@ -71,8 +91,16 @@\n     setLoading(true);\r\n     try {\r\n       const docRef = doc(firestoreDb.categories.links.getRef(categoryId));\r\n       await setDoc(docRef, linkConverter.toFirestore(link));\r\n+\r\n+      // Get category title for notification\r\n+      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n+      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+\r\n+      // Create notification\r\n+      await createLinkNotification.created(link.title, categoryTitle, categoryId, docRef.id);\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error adding link:', err);\r\n@@ -86,8 +114,24 @@\n     setLoading(true);\r\n     try {\r\n       const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n       await updateDoc(docRef, linkConverter.toFirestore(data));\r\n+\r\n+      // Get category title for notification\r\n+      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n+      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+\r\n+      // Create notification\r\n+      if (data.title) {\r\n+        if (data.notes && data.notes.content) {\r\n+          // If notes were updated\r\n+          await createNoteNotification.updated(data.title, categoryTitle, categoryId, linkId);\r\n+        } else {\r\n+          // If only link was updated\r\n+          await createLinkNotification.updated(data.title, categoryTitle, categoryId, linkId);\r\n+        }\r\n+      }\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error updating link:', err);\r\n@@ -96,13 +140,22 @@\n       return false;\r\n     }\r\n   };\r\n \r\n-  const deleteLink = async (categoryId: string, linkId: string) => {\r\n+  const deleteLink = async (categoryId: string, linkId: string, linkTitle: string) => {\r\n     setLoading(true);\r\n     try {\r\n       const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n+      \r\n+      // Get category title for notification\r\n+      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n+      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+\r\n       await deleteDoc(docRef);\r\n+\r\n+      // Create notification\r\n+      await createLinkNotification.deleted(linkTitle, categoryTitle);\r\n+\r\n       setLoading(false);\r\n       return true;\r\n     } catch (err) {\r\n       console.error('Error deleting link:', err);\r\n"
                },
                {
                    "date": 1730205489591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n import {\r\n   createCategoryNotification,\r\n   createLinkNotification,\r\n   createNoteNotification\r\n-} from '@/lib/notifications';\r\n+} from '@/lib/firebase/notifications';\r\n \r\n export function useFirebaseOperations() {\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState<Error | null>(null);\r\n"
                },
                {
                    "date": 1730205865816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n   deleteDoc,\r\n   collection,\r\n   doc,\r\n   getDocs,\r\n+  getDoc,\r\n   setDoc\r\n } from 'firebase/firestore';\r\n import { firestoreDb, categoryConverter, linkConverter } from '@/lib/firebase/firestore';\r\n import { Category, Link } from '@/types';\r\n@@ -93,10 +94,11 @@\n       const docRef = doc(firestoreDb.categories.links.getRef(categoryId));\r\n       await setDoc(docRef, linkConverter.toFirestore(link));\r\n \r\n       // Get category title for notification\r\n-      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n-      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n \r\n       // Create notification\r\n       await createLinkNotification.created(link.title, categoryTitle, categoryId, docRef.id);\r\n \r\n@@ -116,10 +118,11 @@\n       const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n       await updateDoc(docRef, linkConverter.toFirestore(data));\r\n \r\n       // Get category title for notification\r\n-      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n-      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n \r\n       // Create notification\r\n       if (data.title) {\r\n         if (data.notes && data.notes.content) {\r\n@@ -146,10 +149,11 @@\n     try {\r\n       const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n       \r\n       // Get category title for notification\r\n-      const categoryDoc = await firestoreDb.categories.getDocRef(categoryId).get();\r\n-      const categoryTitle = categoryDoc.data()?.title || 'Unknown Category';\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n \r\n       await deleteDoc(docRef);\r\n \r\n       // Create notification\r\n"
                },
                {
                    "date": 1730219034192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+// hooks/useFirebaseOperations.ts\r\n+'use client';\r\n+\r\n+import { useState } from 'react';\r\n+import { \r\n+  addDoc, \r\n+  updateDoc, \r\n+  deleteDoc,\r\n+  collection,\r\n+  doc,\r\n+  getDocs,\r\n+  getDoc,\r\n+  setDoc\r\n+} from 'firebase/firestore';\r\n+import { firestoreDb, categoryConverter, linkConverter } from '@/lib/firebase/firestore';\r\n+import { Category, Link } from '@/types';\r\n+import {\r\n+  createCategoryNotification,\r\n+  createLinkNotification,\r\n+  createNoteNotification\r\n+} from '@/lib/firebase/notifications';\r\n+\r\n+export function useFirebaseOperations() {\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+\r\n+  // Category Operations\r\n+  const addCategory = async (category: Omit<Category, 'id'>) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = doc(firestoreDb.categories.getRef());\r\n+      await setDoc(docRef, categoryConverter.toFirestore({\r\n+        ...category,\r\n+        links: []\r\n+      }));\r\n+\r\n+      // Create notification\r\n+      await createCategoryNotification.created(category.title, docRef.id);\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error adding category:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  const updateCategory = async (categoryId: string, data: Partial<Category>) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      await updateDoc(docRef, categoryConverter.toFirestore(data));\r\n+\r\n+      // Create notification\r\n+      if (data.title) {\r\n+        await createCategoryNotification.updated(data.title, categoryId);\r\n+      }\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error updating category:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  const deleteCategory = async (categoryId: string, categoryTitle: string) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      await deleteDoc(docRef);\r\n+\r\n+      // Create notification\r\n+      await createCategoryNotification.deleted(categoryTitle);\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error deleting category:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  // Link Operations\r\n+  const addLink = async (categoryId: string, link: Link) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = doc(firestoreDb.categories.links.getRef(categoryId));\r\n+      await setDoc(docRef, linkConverter.toFirestore(link));\r\n+\r\n+      // Get category title for notification\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n+\r\n+      // Create notification\r\n+      await createLinkNotification.created(link.title, categoryTitle, categoryId, docRef.id);\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error adding link:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  const updateLink = async (categoryId: string, linkId: string, data: Partial<Link>) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n+      await updateDoc(docRef, linkConverter.toFirestore(data));\r\n+\r\n+      // Get category title for notification\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n+\r\n+      // Create notification\r\n+      if (data.title) {\r\n+        if (data.notes && data.notes.content) {\r\n+          // If notes were updated\r\n+          await createNoteNotification.updated(data.title, categoryTitle, categoryId, linkId);\r\n+        } else {\r\n+          // If only link was updated\r\n+          await createLinkNotification.updated(data.title, categoryTitle, categoryId, linkId);\r\n+        }\r\n+      }\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error updating link:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  const deleteLink = async (categoryId: string, linkId: string, linkTitle: string) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n+      \r\n+      // Get category title for notification\r\n+      const categoryDocRef = firestoreDb.categories.getDocRef(categoryId);\r\n+      const categorySnap = await getDoc(categoryDocRef);\r\n+      const categoryTitle = categorySnap.data()?.title || 'Unknown Category';\r\n+\r\n+      await deleteDoc(docRef);\r\n+\r\n+      // Create notification\r\n+      await createLinkNotification.deleted(linkTitle, categoryTitle);\r\n+\r\n+      setLoading(false);\r\n+      return true;\r\n+    } catch (err) {\r\n+      console.error('Error deleting link:', err);\r\n+      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n+      setLoading(false);\r\n+      return false;\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    loading,\r\n+    error,\r\n+    addCategory,\r\n+    updateCategory,\r\n+    deleteCategory,\r\n+    addLink,\r\n+    updateLink,\r\n+    deleteLink,\r\n+  };\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730137159526,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc,\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  setDoc\r\n} from 'firebase/firestore';\r\nimport { firestoreDb, categoryConverter, linkConverter } from '@/lib/firebase/firestore';\r\nimport { Category, Link } from '@/types';\r\n\r\nexport function useFirebaseOperations() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  // Category Operations\r\n  const addCategory = async (category: Omit<Category, 'id'>) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = doc(firestoreDb.categories.getRef());\r\n      await setDoc(docRef, categoryConverter.toFirestore({\r\n        ...category,\r\n        links: []\r\n      }));\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error adding category:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const updateCategory = async (categoryId: string, data: Partial<Category>) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n      await updateDoc(docRef, categoryConverter.toFirestore(data));\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error updating category:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const deleteCategory = async (categoryId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = firestoreDb.categories.getDocRef(categoryId);\r\n      await deleteDoc(docRef);\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deleting category:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Link Operations\r\n  const addLink = async (categoryId: string, link: Link) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = doc(firestoreDb.categories.links.getRef(categoryId));\r\n      await setDoc(docRef, linkConverter.toFirestore(link));\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error adding link:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const updateLink = async (categoryId: string, linkId: string, data: Partial<Link>) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n      await updateDoc(docRef, linkConverter.toFirestore(data));\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error updating link:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const deleteLink = async (categoryId: string, linkId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const docRef = firestoreDb.categories.links.getDocRef(categoryId, linkId);\r\n      await deleteDoc(docRef);\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deleting link:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error'));\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    addCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n    addLink,\r\n    updateLink,\r\n    deleteLink,\r\n  };\r\n}"
        }
    ]
}