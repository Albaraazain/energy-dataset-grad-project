{
    "sourceFile": "types/notification.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730204731028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730205106634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,154 @@\n-// types/notification.ts\r\n+// lib/notifications.ts\r\n+import { addDoc } from 'firebase/firestore';\r\n+import { firestoreDb, notificationConverter } from './firebase/firestore';\r\n+import { Notification, NotificationType } from '@/types/notification';\r\n \r\n-export type NotificationType = \r\n-  | 'category_created'\r\n-  | 'category_updated'\r\n-  | 'category_deleted'\r\n-  | 'link_created'\r\n-  | 'link_updated'\r\n-  | 'link_deleted'\r\n-  | 'note_created'\r\n-  | 'note_updated'\r\n-  | 'system';\r\n-\r\n-export interface Notification {\r\n-  id: string;\r\n+interface CreateNotificationParams {\r\n   type: NotificationType;\r\n   title: string;\r\n   message: string;\r\n-  timestamp: string;\r\n-  read: boolean;\r\n   metadata?: {\r\n     categoryId?: string;\r\n     categoryTitle?: string;\r\n     linkId?: string;\r\n     linkTitle?: string;\r\n   };\r\n }\r\n \r\n-export interface NotificationContextType {\r\n-  notifications: Notification[];\r\n\\ No newline at end of file\n-  unreadCount: number;\r\n-  markAsRead: (id: string) => Promise<void>;\r\n-  markAllAsRead: () => Promise<void>;\r\n-  dismissNotification: (id: string) => Promise<void>;\r\n-}\n+export const createNotification = async ({\r\n+  type,\r\n+  title,\r\n+  message,\r\n+  metadata\r\n+}: CreateNotificationParams) => {\r\n+  try {\r\n+    const notificationData: Omit<Notification, 'id'> = {\r\n+      type,\r\n+      title,\r\n+      message,\r\n+      timestamp: new Date().toISOString(),\r\n+      read: false,\r\n+      metadata\r\n+    };\r\n+\r\n+    const docRef = await addDoc(\r\n+      firestoreDb.notifications.getRef(),\r\n+      notificationConverter.toFirestore(notificationData)\r\n+    );\r\n+\r\n+    return docRef.id;\r\n+  } catch (error) {\r\n+    console.error('Error creating notification:', error);\r\n+    return null;\r\n+  }\r\n+};\r\n+\r\n+// Helper functions to create specific types of notifications\r\n+export const createCategoryNotification = {\r\n+  created: async (categoryTitle: string, categoryId: string) => {\r\n+    return createNotification({\r\n+      type: 'category_created',\r\n+      title: 'New Category Created',\r\n+      message: `Category \"${categoryTitle}\" has been created`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle\r\n+      }\r\n+    });\r\n+  },\r\n+\r\n+  updated: async (categoryTitle: string, categoryId: string) => {\r\n+    return createNotification({\r\n+      type: 'category_updated',\r\n+      title: 'Category Updated',\r\n+      message: `Category \"${categoryTitle}\" has been updated`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle\r\n+      }\r\n+    });\r\n+  },\r\n+\r\n+  deleted: async (categoryTitle: string) => {\r\n+    return createNotification({\r\n+      type: 'category_deleted',\r\n+      title: 'Category Deleted',\r\n+      message: `Category \"${categoryTitle}\" has been deleted`,\r\n+      metadata: {\r\n+        categoryTitle\r\n+      }\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+export const createLinkNotification = {\r\n+  created: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n+    return createNotification({\r\n+      type: 'link_created',\r\n+      title: 'New Link Added',\r\n+      message: `Link \"${linkTitle}\" has been added to ${categoryTitle}`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle,\r\n+        linkId,\r\n+        linkTitle\r\n+      }\r\n+    });\r\n+  },\r\n+\r\n+  updated: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n+    return createNotification({\r\n+      type: 'link_updated',\r\n+      title: 'Link Updated',\r\n+      message: `Link \"${linkTitle}\" in ${categoryTitle} has been updated`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle,\r\n+        linkId,\r\n+        linkTitle\r\n+      }\r\n+    });\r\n+  },\r\n+\r\n+  deleted: async (linkTitle: string, categoryTitle: string) => {\r\n+    return createNotification({\r\n+      type: 'link_deleted',\r\n+      title: 'Link Deleted',\r\n+      message: `Link \"${linkTitle}\" has been removed from ${categoryTitle}`,\r\n+      metadata: {\r\n+        categoryTitle,\r\n+        linkTitle\r\n+      }\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+export const createNoteNotification = {\r\n+  created: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n+    return createNotification({\r\n+      type: 'note_created',\r\n+      title: 'New Note Added',\r\n+      message: `A note has been added to \"${linkTitle}\" in ${categoryTitle}`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle,\r\n+        linkId,\r\n+        linkTitle\r\n+      }\r\n+    });\r\n+  },\r\n+\r\n+  updated: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n+    return createNotification({\r\n+      type: 'note_updated',\r\n+      title: 'Note Updated',\r\n+      message: `The note for \"${linkTitle}\" in ${categoryTitle} has been updated`,\r\n+      metadata: {\r\n+        categoryId,\r\n+        categoryTitle,\r\n+        linkId,\r\n+        linkTitle\r\n+      }\r\n+    });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730205546233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,154 +1,35 @@\n-// lib/notifications.ts\r\n-import { addDoc } from 'firebase/firestore';\r\n-import { firestoreDb, notificationConverter } from './firebase/firestore';\r\n-import { Notification, NotificationType } from '@/types/notification';\r\n+// types/notification.ts\r\n+export type NotificationType = \r\n+  | 'category_created'\r\n+  | 'category_updated'\r\n+  | 'category_deleted'\r\n+  | 'link_created'\r\n+  | 'link_updated'\r\n+  | 'link_deleted'\r\n+  | 'note_created'\r\n+  | 'note_updated'\r\n+  | 'system';\r\n \r\n-interface CreateNotificationParams {\r\n+export interface Notification {\r\n+  id: string;\r\n   type: NotificationType;\r\n   title: string;\r\n   message: string;\r\n+  timestamp: string;\r\n+  read: boolean;\r\n+  dismissed?: boolean;\r\n   metadata?: {\r\n     categoryId?: string;\r\n     categoryTitle?: string;\r\n     linkId?: string;\r\n     linkTitle?: string;\r\n   };\r\n }\r\n \r\n-export const createNotification = async ({\r\n-  type,\r\n-  title,\r\n-  message,\r\n-  metadata\r\n-}: CreateNotificationParams) => {\r\n-  try {\r\n-    const notificationData: Omit<Notification, 'id'> = {\r\n-      type,\r\n-      title,\r\n-      message,\r\n-      timestamp: new Date().toISOString(),\r\n-      read: false,\r\n-      metadata\r\n-    };\r\n-\r\n-    const docRef = await addDoc(\r\n-      firestoreDb.notifications.getRef(),\r\n-      notificationConverter.toFirestore(notificationData)\r\n-    );\r\n-\r\n-    return docRef.id;\r\n-  } catch (error) {\r\n-    console.error('Error creating notification:', error);\r\n-    return null;\r\n-  }\r\n-};\r\n-\r\n-// Helper functions to create specific types of notifications\r\n-export const createCategoryNotification = {\r\n-  created: async (categoryTitle: string, categoryId: string) => {\r\n-    return createNotification({\r\n-      type: 'category_created',\r\n-      title: 'New Category Created',\r\n-      message: `Category \"${categoryTitle}\" has been created`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle\r\n-      }\r\n-    });\r\n-  },\r\n-\r\n-  updated: async (categoryTitle: string, categoryId: string) => {\r\n-    return createNotification({\r\n-      type: 'category_updated',\r\n-      title: 'Category Updated',\r\n-      message: `Category \"${categoryTitle}\" has been updated`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle\r\n-      }\r\n-    });\r\n-  },\r\n-\r\n-  deleted: async (categoryTitle: string) => {\r\n-    return createNotification({\r\n-      type: 'category_deleted',\r\n-      title: 'Category Deleted',\r\n-      message: `Category \"${categoryTitle}\" has been deleted`,\r\n-      metadata: {\r\n-        categoryTitle\r\n-      }\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-export const createLinkNotification = {\r\n-  created: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n-    return createNotification({\r\n-      type: 'link_created',\r\n-      title: 'New Link Added',\r\n-      message: `Link \"${linkTitle}\" has been added to ${categoryTitle}`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle,\r\n-        linkId,\r\n-        linkTitle\r\n-      }\r\n-    });\r\n-  },\r\n-\r\n-  updated: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n-    return createNotification({\r\n-      type: 'link_updated',\r\n-      title: 'Link Updated',\r\n-      message: `Link \"${linkTitle}\" in ${categoryTitle} has been updated`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle,\r\n-        linkId,\r\n-        linkTitle\r\n-      }\r\n-    });\r\n-  },\r\n-\r\n-  deleted: async (linkTitle: string, categoryTitle: string) => {\r\n-    return createNotification({\r\n-      type: 'link_deleted',\r\n-      title: 'Link Deleted',\r\n-      message: `Link \"${linkTitle}\" has been removed from ${categoryTitle}`,\r\n-      metadata: {\r\n-        categoryTitle,\r\n-        linkTitle\r\n-      }\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-export const createNoteNotification = {\r\n-  created: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n-    return createNotification({\r\n-      type: 'note_created',\r\n-      title: 'New Note Added',\r\n-      message: `A note has been added to \"${linkTitle}\" in ${categoryTitle}`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle,\r\n-        linkId,\r\n-        linkTitle\r\n-      }\r\n-    });\r\n\\ No newline at end of file\n-  },\r\n-\r\n-  updated: async (linkTitle: string, categoryTitle: string, categoryId: string, linkId: string) => {\r\n-    return createNotification({\r\n-      type: 'note_updated',\r\n-      title: 'Note Updated',\r\n-      message: `The note for \"${linkTitle}\" in ${categoryTitle} has been updated`,\r\n-      metadata: {\r\n-        categoryId,\r\n-        categoryTitle,\r\n-        linkId,\r\n-        linkTitle\r\n-      }\r\n-    });\r\n-  }\r\n-};\n+export interface NotificationContextType {\r\n+  notifications: Notification[];\r\n+  unreadCount: number;\r\n+  markAsRead: (id: string) => Promise<void>;\r\n+  markAllAsRead: () => Promise<void>;\r\n+  dismissNotification: (id: string) => Promise<void>;\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730204731028,
            "name": "Commit-0",
            "content": "// types/notification.ts\r\n\r\nexport type NotificationType = \r\n  | 'category_created'\r\n  | 'category_updated'\r\n  | 'category_deleted'\r\n  | 'link_created'\r\n  | 'link_updated'\r\n  | 'link_deleted'\r\n  | 'note_created'\r\n  | 'note_updated'\r\n  | 'system';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: NotificationType;\r\n  title: string;\r\n  message: string;\r\n  timestamp: string;\r\n  read: boolean;\r\n  metadata?: {\r\n    categoryId?: string;\r\n    categoryTitle?: string;\r\n    linkId?: string;\r\n    linkTitle?: string;\r\n  };\r\n}\r\n\r\nexport interface NotificationContextType {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n  markAsRead: (id: string) => Promise<void>;\r\n  markAllAsRead: () => Promise<void>;\r\n  dismissNotification: (id: string) => Promise<void>;\r\n}"
        }
    ]
}